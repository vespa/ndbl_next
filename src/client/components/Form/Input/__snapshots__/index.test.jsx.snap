// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`[Component: Input] should match snapshot 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Input
    name="name"
    onChange={[Function]}
    required={true}
    title="Name"
    type="text"
    validation="no-empty"
    value=""
  >
    <span />
  </Input>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <label
        htmlFor="name"
      >
        <span
          style={
            Object {
              "display": "none",
            }
          }
        >
          Name
        </span>
        <input
          className=" undefined inp inp-name"
          id="name"
          name="name"
          onChange={[Function]}
          placeholder="Name"
          required={true}
          title="Name"
          type="text"
          validation="no-empty"
          value=""
        />
        <span />
      </label>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <span
            style={
              Object {
                "display": "none",
              }
            }
          >
            Name
          </span>,
          <input
            className=" undefined inp inp-name"
            id="name"
            name="name"
            onChange={[Function]}
            placeholder="Name"
            required={true}
            title="Name"
            type="text"
            validation="no-empty"
            value=""
          />,
          <span />,
        ],
        "htmlFor": "name",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Name",
            "style": Object {
              "display": "none",
            },
          },
          "ref": null,
          "rendered": "Name",
          "type": "span",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": " undefined inp inp-name",
            "id": "name",
            "name": "name",
            "onChange": [Function],
            "placeholder": "Name",
            "required": true,
            "title": "Name",
            "type": "text",
            "validation": "no-empty",
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "span",
        },
      ],
      "type": "label",
    },
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <label
          htmlFor="name"
        >
          <span
            style={
              Object {
                "display": "none",
              }
            }
          >
            Name
          </span>
          <input
            className=" undefined inp inp-name"
            id="name"
            name="name"
            onChange={[Function]}
            placeholder="Name"
            required={true}
            title="Name"
            type="text"
            validation="no-empty"
            value=""
          />
          <span />
        </label>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <span
              style={
                Object {
                  "display": "none",
                }
              }
            >
              Name
            </span>,
            <input
              className=" undefined inp inp-name"
              id="name"
              name="name"
              onChange={[Function]}
              placeholder="Name"
              required={true}
              title="Name"
              type="text"
              validation="no-empty"
              value=""
            />,
            <span />,
          ],
          "htmlFor": "name",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Name",
              "style": Object {
                "display": "none",
              },
            },
            "ref": null,
            "rendered": "Name",
            "type": "span",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": " undefined inp inp-name",
              "id": "name",
              "name": "name",
              "onChange": [Function],
              "placeholder": "Name",
              "required": true,
              "title": "Name",
              "type": "text",
              "validation": "no-empty",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "span",
          },
        ],
        "type": "label",
      },
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
